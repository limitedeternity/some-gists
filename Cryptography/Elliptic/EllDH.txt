> # Протокол Диффи-Хеллмана для обмена ключами
> # на эллиптических кривых.
> # Автор: Беспалов В.А (4ИСТ)
> # ----------------------------------------------------------------
> # ***************************************************
> # Процедура для сложения  р а з л и ч н ы х  точек P1
> # и P2 эллиптической кривой с модулем p, p>1
> # ------------------------------------------
> sum_Point:=proc(P1, P2, p)
>   local x1,y1,x2,y2,x3,y3,lambda,P3:
>   x1:=P1[0]: y1:=P1[1]: x2:=P2[0]: y2:=P2[1]:
>   if (x1=0 and y1=0) 
>     then x3:=x2: y3:=y2:
>     else if (x2=0 and y2=0)
>            then x3:=x1: y3:=y1:
>            else if (x1=x2 and y1=(-y2) mod p)
>                   then x3:=0: y3:=0:
>                   else lambda:=(y2-y1)/(x2-x1) mod p:
>                        x3    :=(lambda^2-x1-x2) mod p:
>                        y3    :=(lambda*(x1-x3)-y1) mod p:
>                 end if:
>          end if:
>   end if:
>   P3:=array(0..1,[x3,y3]):
> end:
> #
> # *****************************************************
> # Процедура для удвоения точки P1 эллиптической кривой;
> # результатом является точка P3=[2]P1
> # -----------------------------------
> double_Point:=proc(P1, p, a)
>   local x1,y1,x3,y3,lambda,P3:
>   x1:=P1[0]: y1:=P1[1]:
>   if (y1=0)
>     then x3:=0: y3:=0:
>     else lambda:=((3*x1^2+a)/2/y1)   mod p:
>          x3    :=(lambda^2-2*x1)     mod p:
>          y3    :=(lambda*(x1-x3)-y1) mod p:
>   end if:
>   P3:=array(0..1,[x3,y3]):
> end:
> #
> # ********************************************************
> # Процедура для выполнения умножения точки P эллиптической
> # кривой на целое число d; результатом является Q=[d]P:
> #  P  - точка на эллиптической кривой;
> #  d  - множитель (ц е л о е  число);
> #  p  - модуль    (н а т у р а л ь н о е  число, >1);
> #  a  - коэффициент при x в уравнении эллиптической кривой
> # ------------------------------------------------------
> p_Mul:=proc(P, d, p, a)
>   local N,i,Q,xqs,yqs,d1;
>   if (d>0)
>     then Q:=P;
>          N:=convert(d,binary); N:=convert(N,string);
>          for i from 2 to length(N) do
>            Q:=double_Point(Q,p,a):
>            if (N[i]="1")
>              then if (Q[0]=P[0] and Q[1]=P[1])
>                    then Q:=double_Point(Q,p,a):
>                     else Q:=   sum_Point(Q,P,p): 
>                   end if:
>            end if:
>          end do:
>          RETURN(array(0..1,[Q[0],Q[1]])):
>     else d1:=-d;
>          Q:=P;
>         N:=convert(d1,binary); N:=convert(N,string);
>          for i from 2 to length(N) do
>            Q:=double_Point(Q,p,a):
>            if (N[i]="1")
>              then if (Q[0]=P[0] and Q[1]=P[1])
>                     then Q:=double_Point(Q,p,a):
>                     else Q:=   sum_Point(Q,P,p): 
>                   end if:
>            end if:
>          end do:
>          RETURN(array(0..1,[Q[0],-Q[1]])):
>   end if:
> end:
> #
> #
> # ===========================================
> # Определение эллиптической кривой E   (-1,1)
> #                                   751
> # y^2=x^3-x+1, a=-1, b=1, p=751
> # ---------------------------------
> p:=751; ka:=-1; kb:=1; print(\n\n);
> P:=array(0..1,[69,510]);
> # ----------------------------------------------------------------
> # (1) Aлиса генерирует (независимо от Боба) секретное число a, вы-
> # числяет [a]P (значение является открытым) и пересылает его Бобу;
> # ----------------------------------------------------------------
> r:=rand(1..p); 
> alpha:=r(); printf("Число Алисы: %d", alpha);
> 
> aP:=p_Mul(P,alpha,p,ka);
> # ----------------------------------------------------------------
> # (2) Боб генерирует (независимо от Aлисы) секретное число b,  вы-
> # числяет [b]P (значение является открытым) и пересылает его Алисе;
> # ----------------------------------------------------------------
> betta:=r(); printf("Число Боба: %d", betta);
> 
> bP:=p_Mul(P,betta,p,ka);
> # ----------------------------------------------------------------
> # (3) Алиса умножает значение [b]P на a и получает [a]([b]P);
> # ----------------------------------------------------------------
> abP:=p_Mul(bP,alpha,p,ka);
> printf("Ключ Алисы: (%d, %d)", abP[0], abP[1]);
> # ----------------------------------------------------------------
> # (4) Боб умножает значение [a]P на b и получает
> # ----------------------------------------------------------------
> baP:=p_Mul(aP,betta,p,ka);
> printf("Ключ Боба: (%d, %d)\n", baP[0], baP[1]);
> printf("Проверка (abP - baP): (%d, %d)", abP[0]-baP[0], abP[1]-baP[1]);
> 
> 
