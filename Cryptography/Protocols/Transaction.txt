> # ----------------------------------------------------------------
> # Алгоритм электронных платежей  
> # ----------------------------------------------------------------
> with(numtheory):
> # ----------------------------------------------------------------
> # Закрытые ключи - P, Q, d
> # Открытые ключи - N=P*Q, e
> # ----------------------------------------------------------------
> 
> P:=17;
> Q:=7;
> N:=P*Q;
> d:=77;
> verify(igcd(d, (P - 1) * (Q - 1)), 1, 'equal');    # Проверка выбора d
> e := d &^ (phi((P - 1) * (Q - 1))-1) mod ((P - 1) * (Q - 1));
> # ----------------------------------------------------------------
> # 0. Подготовка к операции
> # ----------------------------------------------------------------
> #     Для исключения возможности подделки "банкнот" их допустимыми но-
> # мерами считаются только числа,  состоящие из двух одинаковых  деся-
> # тичных цифр, например, 11, 77, 99.
> # ----------------------------------------------------------------
> ok:=[];
> repaid:=[];
> for i from 11 by 11 to 99
>   do
>     ok := [op(ok), i];
>   end do:
> # ----------------------------------------------------------------
> 
> account:=50;     # Счет покупателя
> shop_account:=0; # Счет магазина
> bill:=10;        # Номинал купюры
> printf("До платежа:\n");
> printf("Счет покупателя: %d\n", account);
> printf("Счет магазина: %d\n", shop_account);
> printf("Цена: %d\n", bill);
> # ----------------------------------------------------------------
> # 1. Генерация "банкноты"
> # ----------------------------------------------------------------
> #      Если покупатель хочет получить "банкноту", то вначале случай-
> # ным образом выбирает её номер (из числа допустимых).
> # ----------------------------------------------------------------
> n:= 33; # ok[rand(1..nops(ok))()];
> # ------------------------------------
> # Затем он находит случайное число r такое, что (r,N)=1.
> # ------------------------------------
> r:=67;
> verify(igcd(r, N), 1, 'equal');
> # ------------------------------------
> # Далее, покупатель вычисляет n1
> # ------------------------------------
> n1 := n * r &^ e mod N;
> # ------------------------------------
> #    Число n1 покупатель  посылает  в банк,  который после получения
> # списывает со  счёта  покупателя  10$  и отправляет ему свою "слепую
> # подпись"
> # ------------------------------------
> account := account - bill;
> s1 := n1 &^ d mod N;
> # ------------------------------------
> # Покупатель вычисляет s, и получает платежеспособную "банкноту" (n, s)
> # ------------------------------------
> r1:='r1'; sols:=msolve(r*r1=1, N); assign(sols); r1:=r1; 
> s := s1 * r1 mod N;
> # ----------------------------------------------------------------
> # 2. Проверка подлинности банкноты
> # ----------------------------------------------------------------
> # Номер банкноты содержит требуемую избыточность
> if not has(ok, n) then
>    printf("Банкнота фальшивая\n");
> else
>    # Ранее "банкнота" с таким номером не предъявлялась
>    if has(repaid, n) then
>       printf("Банкнота была погашена ранее\n");
>    else
>       # Подпись верна
>       if verify((s &^ e mod N)-n, 0, 'equal') then
>          printf("Одобрено\n");
>          shop_account := shop_account + bill;
>          repaid:=[op(repaid),n];
>       else
>          printf("Несовпадение подписи\n");
>       end if;
>    end if;
> end if;
> 
> printf("После платежа:\n");
> printf("Счет покупателя: %d\n", account);
> printf("Счет магазина: %d\n", shop_account);
                                     17
                                      7
                                     119
                                     77
                                    true
                                      5
                                     []
                                     []
                                     50
                                      0
                                     10
До платежа:
Счет покупателя: 50
Счет магазина: 0
Цена: 10
                                     33
                                     67
                                    true
                                     52
                                     40
                                     103
                                     101
Одобрено
После платежа:
Счет покупателя: 40
Счет магазина: 10
> 
