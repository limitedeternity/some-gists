> # Демонстрация реализации алгоритма RSA 
> # без передачи ключей
> # *******************
> with(numtheory):
> #--------------------------------------------
> # Абоненты A и B  с о в м е с т н о  выбирают  
> # случайное простое число p
> p:=nextprime(1235666991231238234523);
> # ------------------------------------------------------
> # Абонент A выбирает случайное целое число a, (a,p-1)=1,
> # которое является его первым  з а к р ы т ы м  ключом
> # ----------------------------------------------------
> a:=nextprime(1238); 
> verify(igcd(a,p-1), 1, 'equal');
> # --------------------------------------------------
> # Вычисление второго  з а к р ы т о г о  ключа alpha
> # абонента A
> alpha:=a &^ (phi(phi(p))-1) mod phi(p);
> # ------------------------------------------------------
> # Абонент B выбирает случайное целое число b, (b,p-1)=1,
> # которое является его первым  з а к р ы т ы м  ключом
> # ----------------------------------------------------
> b:=nextprime(123834); 
> verify(igcd(b,p-1), 1, 'equal');
> # -------------------------------------------------
> # Вычисление второго  з а к р ы т о го  ключа betta
> # абонента B
> betta:=b &^ (phi(phi(p))-1) mod phi(p);
> # -------------------------------------
> # Кодируемый текст (важно, что m<p-1)
> # -----------------------------------
> m:=123456789101112131415;
> # ------------------------------------------
> # Абонент A шифрует текст m с помощью своего
> # первого закрытого ключа a
> m1:=m &^ a mod p;
> # ---------------------------------------------
> # Абонент B шифрует m1 с помощью своего первого
> # закрытого ключа b
> m2:=m1 &^ b mod p;
> # ---------------------------------------------
> # Абонент A шифрует m2 с помощью своего второго
> # закрытого ключа alpha
> m3:=m2 &^ alpha mod p;
> # ----------------------------------------------------
> # Абонент B расшифровывает m4 (получая в результате m)
> # с помощью своего второго закрытого ключа betta
> m4:=m3 &^ betta mod p;
> # ---------------------------------------------------------
> verify(m, m4, 'equal');

                           1235666991231238234541
                                    1249
                                    true
                            433324373226006682729
                                   123853
                                    true
                           1102206216428041914197
                            123456789101112131415
                            873764524847617431428
                            295341732700159888505
                            563426892693809468907
                            123456789101112131415
                                    true
